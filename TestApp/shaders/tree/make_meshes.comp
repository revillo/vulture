#version 430
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 4, local_size_y = 2, local_size_z = 1) in;

#include "tree_common.glsl"
#include "../terrain/terrain_constants.glsl"

layout(std430, set = 0, binding = 0) buffer TreeBuffer {
  
  uint counter;
 // uvec3 padding;
  Rig[] rigs;
 
} treeBuffer;


struct Vertex {
  vec4 position;
  vec4 normal;
};

layout(std430, set = 1, binding = 0) buffer Mesh
{
   Vertex vertices[];
} mesh;

mat3 rotationMatrix(vec3 axis, float angle) {
  axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
  
  return mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,
		oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 
		oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c 
		);

}

vec3 rotationAxisAngle(vec3 v, vec3 axis, float angle)
{
	return rotationMatrix(axis, angle) * v;
}


const uint pointsPerRing = gl_WorkGroupSize.x;
const uint numRings = gl_WorkGroupSize.y;
const uint pointsPerSpline = pointsPerRing * numRings;
const uint pointsPerSkeleton = pointsPerSpline * MAX_LINKS; 
 
#define PI2 6.2831853f

void main() {

  const uint skeletonIndex = gl_WorkGroupID.x;
  const uint splineIndex = gl_WorkGroupID.y;
  
  uint ring = gl_LocalInvocationID.y;
  uint slice = gl_LocalInvocationID.x;
  float tr = float(ring) / (numRings - 1);
  float ts = float(slice) / pointsPerRing;
  
  uint pid = (skeletonIndex * pointsPerSkeleton)
    + (splineIndex * pointsPerSpline)
    + (ring * pointsPerRing) + slice;

  
  if (skeletonIndex >= treeBuffer.counter) {
    mesh.vertices[pid].position = vec4(-1.0, -1.0, -1.0, 0.0) * 100.0;
    mesh.vertices[pid].normal = vec4(0.0, 0.0, 0.0, 0.0);
    return;
  }
  
  Rig skeleton = treeBuffer.rigs[skeletonIndex];

  if (splineIndex >= skeleton.info.x) {
    mesh.vertices[pid].position = vec4(-1.0, -1.0, -1.0, 0.0) * 100.0;
    mesh.vertices[pid].normal = vec4(0.0, 0.0, 0.0, 0.0);
    return;
  }
  
  
  Link link = skeleton.links[splineIndex];

  Joint point = skeleton.joints[link.pis[ring]];
  
  vec3 center = point.pos.xyz;
  
  float scale = point.pos.w;
  
  //vec3 tangent = point.quat.xyz;
  //vec3 normal = getNormal(point.quat);
  //normal = rotationAxisAngle(normal, tangent, ts * PI2);
  
  uint myr = link.cs[ring] % 10;
  uint c = link.cs[ring] / 10;
  float cd = float(c) + 1;
  
  float myTheta = (float(myr) / cd) * PI2;
  float oneTheta = (1.0 / cd) * PI2;
  
  vec4 locDir;
  
  if (c == 0) {
    
    mat3 rMat = rotationMatrix(point.quat.xyz, point.quat.w);
    locDir.xyz = rotationAxisAngle(rMat * vec3(0.0, 1.0, 0.0), rMat * vec3(0.0, 0.0, 1.0), ts * PI2);
    locDir.w = 0.0;
    
  } else if (c == 1) {
    
    mat3 rMat = rotationMatrix(point.quat.xyz, point.quat.w);
    locDir.xyz = rotationAxisAngle(rMat * vec3(0.0, 1.0, 0.0), rMat * vec3(0.0, 0.0, 1.0), ts * PI2);
    locDir.w = 1.0;
    
  } else {
    mat3 rMat = rotationMatrix(point.quat.xyz, point.quat.w);

   locDir.w = 1.0;
    if (slice == 0) {
      
      locDir.xyz = rMat * vec3(0.0, 1.0, 0.0);
      
    } else if (slice == 2) {
      
      locDir.xyz = rMat * vec3(0.0, -1.0, 0.0);
      
    } else if ((slice == 1 && ring == 1) || (slice == 3 && ring == 0)) {
      
      locDir.xyz = rotationAxisAngle(rMat * vec3(0.0, 0.0, -1.0), rMat * vec3(0.0, 1.0, 0.0), myTheta + oneTheta * 0.5);
      
      locDir.w = 1.0;
   
    } else {
      
      locDir.xyz = rotationAxisAngle(rMat * vec3(0.0, 0.0, -1.0), rMat * vec3(0.0, 1.0, 0.0), myTheta - oneTheta * 0.5);
      locDir.w = 1.0;
      
    }
    
    
  }
  
  locDir.w *= scale;

  //mesh.vertices[pid].position = vec4(center + locDir, 1.0);
  mesh.vertices[pid].position = vec4(center, 1.0);
  mesh.vertices[pid].normal = locDir;
  
  return;
}