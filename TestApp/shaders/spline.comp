#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 4, local_size_y = 2, local_size_z = 1) in;

struct Spline {
  vec4 p1;
  vec4 p2;
  vec4 ray1;
  vec4 ray2;
};

layout(std430, set = 0, binding = 0) buffer Skeleton
{
  
  Spline splines[];
  
} skeleton;

layout(std430, set = 1, binding = 0) buffer Mesh
{
   vec4 points[];
} mesh;


vec3 Slerp(vec3 r1, vec3 r2, float t)
{
	vec3 n1 = normalize(r1);
	vec3 n2 = normalize(r2);

	float dotp = dot(n1, n2);

	if (dotp > 0.9999)
	{
		return mix(r1, r2, t);
	}

	float theta = acos(dotp);
	vec3 P = ((n1 * sin((1.0 - t)*theta) + n2 * sin(t*theta)) / sin(theta));
	
	return normalize(P) * length(mix(length(n1), length(n2), t));
}
vec3 rotationAxisAngle(vec3 v, vec3 axis, float angle)
{
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;

	return mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,
		oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 
		oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c 
		) * v;
}


const uint pointsPerRing = gl_WorkGroupSize.x;
const uint numRings = gl_WorkGroupSize.y;
const uint pointsPerSpline = pointsPerRing * numRings;
 
#define PI2 6.2831853f

void main() {

  const uint splineIndex = gl_WorkGroupID.x;

  Spline spline = skeleton.splines[splineIndex];
  
  uvec2 lid = gl_LocalInvocationID.xy;
  
  uint pid = splineIndex * pointsPerSpline + (lid.y * pointsPerRing) + lid.x;
  
  float ty = float(lid.y) / (numRings - 1);
  float tx = float(lid.x) / pointsPerRing;
  
  
  
  vec3 center = mix(spline.p1.xyz, spline.p2.xyz, ty);

  vec3 ray = Slerp(spline.ray1.xyz, spline.ray2.xyz, ty);
  
  ray = rotationAxisAngle(ray, normalize(spline.p2.xyz - spline.p1.xyz), tx * PI2);
  
  mesh.points[pid] = vec4(center + ray, 1.0);

  
  return;
}